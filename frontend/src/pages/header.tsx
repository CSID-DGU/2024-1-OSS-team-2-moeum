import type { GetStaticProps, InferGetStaticPropsType, NextPage } from 'next'
import { useEffect, useState } from 'react';
import { Container, Dropdown, Nav, Navbar, Spinner} from 'react-bootstrap';
import Link from 'next/link';
import Head from "next/head";
import { useGroup } from 'contexts/GroupContext';
import { useRouter } from 'next/router';
import withAuth from 'app/components/withAuth';
import { useAuth } from 'contexts/AuthContext';
import { stringify } from 'querystring';


interface Group {
  uuid: string; 
  name: string;
}

const Header: NextPage = () => {

  const router = useRouter();
  const { userState } = useAuth();
  const { selectedGroup, selectGroup } = useGroup();
  const [user, setUser] = useState<any>(null);
  const [groups, setGroups] = useState<Group[]>([]);
  const [groupUuid, setGroupUuid] = useState<string>('');
  const [groupName, setGroupName] = useState<string>('');
  


  const handleBoardListPage = () => {
    router.push('/boardList'); 
  };
  const handleOperatorPage = () => {
    router.push('/operator'); 
  };
  const handleMusicPage = () => {
    router.push('/music'); 
  };
  const handleUserCalendarPage = () => {
    router.push('/userCalendar'); 
  };
  const handleGroupCalendarPage = () => {
    router.push('/groupCalendar'); 
  };
  const handleSigninPage = () => {
    router.push('/signin'); 
  };
  const handleMainPage = () => {
    router.push('/'); 
  };
  const handleTeamRequestPage = () => {
    router.push('/teamRequest'); 
  };

  
  const GroupComponent = ({ setGroupUuid }: { setGroupUuid: React.Dispatch<React.SetStateAction<string>> }) => {
    const { userState } = useAuth();
    const [group, setGroup] = useState<Group | null>(null);
  
    useEffect(() => {
      const fetchGroup = async () => {
        try {
          const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_HOST}/api/group`, {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Authorization': `Bearer ${userState.token}`
            }
          });
          const data: Group[] = await response.json(); // Assuming the response returns an array of groups
          console.log(data);
          if (data.length > 0) {
            console.log(data);
            setGroup(data[0]); // Set only the first group object to state
            setGroupUuid(data[0].uuid); // Set the group UUID
            setGroupName(data[0].name);
            selectGroup(data[0]);
          } else {
            console.log("No groups found in response.");
          }
        } catch (error) {
          console.error('Failed to fetch group:', error);
        }
      };
  
      fetchGroup();
    }, [userState.token, setGroupUuid]);
  
    return null;
  };

    const handleGroupSelect = (group: Group) => {
      selectGroup(group);
    };



    return <>

    <Head>
        <title>모임음악, 모음</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </Head>
      <link rel="icon" href="/favicon.ico" sizes="any" />

    <Navbar bg="light" data-bs-theme="light" className="justify-content-between">
        <Container>
            <Nav.Link onClick={handleMainPage}>모음</Nav.Link>
            <Nav className="me-auto">
            <Nav.Link onClick={handleUserCalendarPage}>개인 캘린더</Nav.Link>
            <Nav.Link onClick={handleGroupCalendarPage}>동아리 캘린더</Nav.Link>
            <Nav.Link onClick={handleBoardListPage}>게시판</Nav.Link>
            <Nav.Link onClick={handleMusicPage}>악보 채보</Nav.Link>
            <Nav.Link onClick={handleOperatorPage}>운영진</Nav.Link>
            <Nav.Link onClick={handleTeamRequestPage}>팀 신청</Nav.Link>
            <Nav.Link eventKey="disabled" disabled></Nav.Link>
          {
          (() => {
           // Check if user is logged in
          if (userState.auth) {
           // If logged in, display user's name
          return <Nav>{userState.id}</Nav>;
        } else {
         // If not logged in, display login/signup link
        return <Nav.Link onClick={handleSigninPage}>로그인/회원가입</Nav.Link>;
          }
        })()
        }

          <Nav.Link eventKey="disabled" disabled></Nav.Link>
          <Nav.Link eventKey="disabled" disabled></Nav.Link>
          <Nav.Link eventKey="disabled" disabled></Nav.Link>
          <Nav.Link eventKey="disabled" disabled></Nav.Link>

          <Dropdown>
              <Dropdown.Toggle variant="secondary" id="dropdown-basic">
                {selectedGroup ? selectedGroup.name : "my 동아리"}
              </Dropdown.Toggle>

              <Dropdown.Menu>
                <GroupComponent setGroupUuid={setGroupUuid} />
                {groupName}
              </Dropdown.Menu>
            </Dropdown>

          {/* <Dropdown>
          <Dropdown.Toggle variant="secondary" id="dropdown-basic">
            {selectedGroup ? selectedGroup.name : "동아리 선택"}
          </Dropdown.Toggle>

            <Dropdown.Menu>
            {groups.map(group => (
                  <Dropdown.Item key={group.uuid} onClick={() => handleGroupSelect(group)}>
            {group.name}
          </Dropdown.Item>
        ))}
            </Dropdown.Menu>
          </Dropdown> */}

        </Nav>
      </Container>
    </Navbar>
</>
}

export default Header